// Code generated by protoc-gen-go.
// source: dlock.proto
// DO NOT EDIT!

package dlock

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type RequestType int32

const (
	RequestType_Ping RequestType = 1
	RequestType_Lock RequestType = 2
)

var RequestType_name = map[int32]string{
	1: "Ping",
	2: "Lock",
}
var RequestType_value = map[string]int32{
	"Ping": 1,
	"Lock": 2,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x RequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}

type ResponseStatus int32

const (
	ResponseStatus_Ok             ResponseStatus = 0
	ResponseStatus_General        ResponseStatus = 1
	ResponseStatus_Version        ResponseStatus = 2
	ResponseStatus_InvalidType    ResponseStatus = 3
	ResponseStatus_TooManyKeys    ResponseStatus = 100
	ResponseStatus_AcquireTimeout ResponseStatus = 120
)

var ResponseStatus_name = map[int32]string{
	0:   "Ok",
	1:   "General",
	2:   "Version",
	3:   "InvalidType",
	100: "TooManyKeys",
	120: "AcquireTimeout",
}
var ResponseStatus_value = map[string]int32{
	"Ok":             0,
	"General":        1,
	"Version":        2,
	"InvalidType":    3,
	"TooManyKeys":    100,
	"AcquireTimeout": 120,
}

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}
func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}
func (x ResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ResponseStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResponseStatus_value, data, "ResponseStatus")
	if err != nil {
		return err
	}
	*x = ResponseStatus(value)
	return nil
}

type Request struct {
	Version          *uint32      `protobuf:"varint,1,opt,name=version,def=2" json:"version,omitempty"`
	Id               *uint64      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	AccessToken      *string      `protobuf:"bytes,3,opt,name=access_token" json:"access_token,omitempty"`
	Type             *RequestType `protobuf:"varint,4,opt,name=type,enum=dlock.RequestType" json:"type,omitempty"`
	Lock             *RequestLock `protobuf:"bytes,51,opt,name=lock" json:"lock,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

const Default_Request_Version uint32 = 2

func (m *Request) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Request_Version
}

func (m *Request) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Request) GetAccessToken() string {
	if m != nil && m.AccessToken != nil {
		return *m.AccessToken
	}
	return ""
}

func (m *Request) GetType() RequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Request) GetLock() *RequestLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

type Response struct {
	Version          *uint32         `protobuf:"varint,1,opt,name=version,def=2" json:"version,omitempty"`
	RequestId        *uint64         `protobuf:"varint,2,opt,name=request_id" json:"request_id,omitempty"`
	Status           *ResponseStatus `protobuf:"varint,3,opt,name=status,enum=dlock.ResponseStatus" json:"status,omitempty"`
	ErrorText        *string         `protobuf:"bytes,4,opt,name=error_text" json:"error_text,omitempty"`
	Keys             []string        `protobuf:"bytes,5,rep,name=keys" json:"keys,omitempty"`
	ServerUnixTime   *int64          `protobuf:"varint,6,opt,name=server_unix_time" json:"server_unix_time,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

const Default_Response_Version uint32 = 2

func (m *Response) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Response_Version
}

func (m *Response) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *Response) GetStatus() ResponseStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Response) GetErrorText() string {
	if m != nil && m.ErrorText != nil {
		return *m.ErrorText
	}
	return ""
}

func (m *Response) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Response) GetServerUnixTime() int64 {
	if m != nil && m.ServerUnixTime != nil {
		return *m.ServerUnixTime
	}
	return 0
}

type RequestLock struct {
	WaitMicro        *uint64  `protobuf:"varint,1,opt,name=wait_micro" json:"wait_micro,omitempty"`
	ReleaseMicro     *uint64  `protobuf:"varint,2,opt,name=release_micro" json:"release_micro,omitempty"`
	Keys             []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RequestLock) Reset()         { *m = RequestLock{} }
func (m *RequestLock) String() string { return proto.CompactTextString(m) }
func (*RequestLock) ProtoMessage()    {}

func (m *RequestLock) GetWaitMicro() uint64 {
	if m != nil && m.WaitMicro != nil {
		return *m.WaitMicro
	}
	return 0
}

func (m *RequestLock) GetReleaseMicro() uint64 {
	if m != nil && m.ReleaseMicro != nil {
		return *m.ReleaseMicro
	}
	return 0
}

func (m *RequestLock) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterEnum("dlock.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("dlock.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
}
